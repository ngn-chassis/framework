name: Publish

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Tag, Release, & Publish
    runs-on: ubuntu-latest
    steps:
        # Checkout the updated source code
      - uses: actions/checkout@v2

        # If the version has changed, create a new git tag for it.
      - name: Tag
        id: autotagger
        uses: butlerlogic/action-autotag@stable
        with:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

        # The remaining steps all depend on whether or  not
        # a new tag was created. There is no need to release/publish
        # updates until the code base is in a releaseable state.

        # Create a github release
        # This will create a snapshot of the module,
        # available in the "Releases" section on Github.
      - name: Create Release
        id: release
        if: steps.autotagger.outputs.tagcreated == 'yes'
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.autotagger.outputs.tagname }}
          release_name: ${{ steps.autotagger.outputs.tagname }}
          body: ${{ steps.autotagger.outputs.tagmessage }}
          draft: false
          prerelease: ${{ steps.autotagger.outputs.prerelease == 'yes' }}

        # Use this action to publish a single module to npm.
      - name: Publish
        id: publish
        if: success() && steps.autotagger.outputs.tagcreated == 'yes' && steps.release.outputs.id != ''
        uses: author/action-publish@stable
        with:
          scan: ./
        env:
          REGISTRY_TOKEN: "${{ secrets.NPM_TOKEN }}"

        # If the publish fails, rollback the release
      - name: Rollback
        if: failure() && steps.autotagger.outputs.tagcreated == 'yes'
        uses: author/action-rollback@stable
        with:
          release_id: ${{ steps.release.outputs.id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Failure Notification
        if: failure() && steps.create_release.outputs.id != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Github # Optional. (defaults to webhook app)
          SLACK_CHANNEL: author # Optional. (defaults to webhook)
          SLACK_AVATAR: "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Npm-logo.svg/320px-Npm-logo.svg.png"
        uses: Ilshidur/action-slack@master
        with:
          args: '@chassis/core ${{ steps.autotagger.outputs.tagname }} failed to publish and was rolled back.' # Optional
      - name: Success Notification
        if: success() && steps.autotagger.outputs.tagname != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Github # Optional. (defaults to webhook app)
          SLACK_CHANNEL: author # Optional. (defaults to webhook)
          SLACK_AVATAR: "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Npm-logo.svg/320px-Npm-logo.svg.png"
        uses: Ilshidur/action-slack@master
        with:
          args: '@chassis/core ${{ steps.autotagger.outputs.tagname }} published to npm.' # Optional
      - name: Inaction Notification
        if: steps.autotagger.outputs.tagname == ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Github # Optional. (defaults to webhook app)
          SLACK_CHANNEL: author # Optional. (defaults to webhook)
          SLACK_AVATAR: "https://cdn.freebiesupply.com/logos/large/2x/nodejs-icon-logo-png-transparent.png" # Optional. can be (repository, sender, an URL) (defaults to webhook app avatar)
        uses: Ilshidur/action-slack@master
        with:
          args: "New code was added to ngn-chassis/framework master branch." # Optional
