NOTE TO SELF: Use viewport units for HORIZONTAL padding on the outside of a UI,
like for gutters, but use percentages on interior elements. This way, the
padding remains in proportion to the container if the font size or container
dimensions are changed, rather than in proportion to the viewport itself, which
doesn't make sense.

PILL
* Remove default pill classes and make a mixin that generates the correct
border-radius for pills.

OR
* Create a custom property for the pill border-radius. This will get around the
extra code needed for more complex components like select menus.

  ISSUE:
  Pills don't look right at small type scale ratios.

THEME
Components need to be able to accept nested selectors. For example, to style an input within a chassis-control:

chassis-control {
  @state initial {
    & input {
      background: red;
    }
  }
}

..." input" needs to get appended to the selector list for the initial state.
As of now, it only gets appended to the very end, and so only applies to the final
element in the list.

Add the following objects:
headings {
  h1 {}
  h2 {}
  h3 {}
  h4 {}
  h5 {}
  h6 {}
  legend {}
}

global {
  ...any style overrides that the user wants to apply globally. These should be injected at the top of the stylesheet.
}


TEXT MODIFIERS
* truncate should be:
.text-truncate {
  overflow: hidden;
}

* add:
.text-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
}

CONSTRAINTS
* Optimization:
If layout.gutter is set to a value not affected by the viewport size (ie vw),
it is unnecessary to output the media queries which constrain the gutter below
and above layout.minWidth and layout.maxWidth respectively.

For example, if I set layout.gutter: '1em', the media queries for .width.constraint
will simply duplicate the padding-left and padding-right decls. Hence, the
media queries can be removed altogether.


THEME
Elements in reset need to be themeable, ie ol and ul, blockquote, etc.

BUTTONS
- Icons screw up the height of the buttons.

MIXINS
- Consider adding "padding-base(fontSizeAlias)" and "margin-base(fontSizeAlias)"
  to inline-block-layout mixin. For example, if the font-size of chassis-selected-option
  is set to root but chassis-option is set to small, the padding on either side
  of each option won't line up with the title
- Another possible solution for the above is to simply take the horizontal
  padding off chassis-option and put it on chassis-select .options

IE11
- Links have permanent underlines
- Form controls need a height rule
- Textareas have the wrong font and display the wrong number of lines

MISC
- image replacement mixin
- maybe some flexbox mixins if they can be done elegantly
- maybe some helper mixins for responsive embeds
- screenreader helpers
- Animated loaders
- Maybe add ui-gutter-x and ui-gutter-y values

BUGS
- Tags need help at scale ratios other than default
- Errors are thrown if you set default vwrs to a wider range than your min/max
  layout width.

COMPONENTS
- Nesting doesn't work beyond one level. Maybe add unnesting operation in spec
  sheets, or simply disallow nesting inside spec sheets.

COMPONENT EXTENSION
- consider ways of combining rulesets to shrink the size of the css
- maybe allow extension of component states as well as full components:
@chassis extend button.pill {
	...
}

AUTO-TYPOGRAPHY SYSTEM
- Tags do not look right at small type scale ratios. The math used to
  calculate the position of icons in the tags outputs a negative number at
  small ratios like 1.2. The math for padding seems to break down on inline
  elements at those small ratios as well. In addition, the vertical alignment
  starts behaving very strangely at those small sizes.
- Possible solution is to make sure the scale ratio value is utilized in all
  calculations- right now, some values are just using Math.sin or log or
  something without respect to the actual scale ratio value.
